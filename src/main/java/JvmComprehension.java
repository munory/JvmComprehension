public class JvmComprehension {

    /**
     * При запуске приложения ClassLoader загружает системные классы (в том числе Object) и класс JvmComprehension в кучу
     * и вызывает метод main(). При вызове метода в стеке создается фрейм.
     */

    public static void main(String[] args) {
        /**
         *  В стеке в фрейме метода main (и далее для всех переменных внутри main) выделяется память под переменную i и
         *  устанавливает ее значение в 1. Используется стек, потому что int примитивный тип.
         */
        int i = 1;

        /**
         * В куче создается новый объект типа Object и ссылка на него присваивается переменной o,
         * которая размещается в стеке.
         */
        Object o = new Object();

        /**
         * ClassLoader загружает класс Integer. В куче создается новый объект типа Integer, содержащий значение 2,
         * ссылка на который присваивается переменной ii, которая размещается в стеке.
         */
        Integer ii = 2;

        /**
         * Вызывается метод printAll(o, i, ii), в который передается ссылка на объект o, значение i и ссылка на объект ii.
         * При этом в стеке создается новый фрейм, в котором хранятся локальные переменные o, i, ii.
         * Эти переменные будут использоваться внутри метода и при выходе из него, фрейм будет удален вместе с переменными.
         */
        printAll(o, i, ii);

        /**
         * Вызывается метод println(), в который передается строка "finished", строка выводится в консоль.
         * После этого метод main() завершает работу,
         * удаляется фрейм под него из стека и так как программа завершает работу, то jvm высвобождает всю память.
         */
        System.out.println("finished");
    }

    private static void printAll(Object o, int i, Integer ii) {

        /**
         * В куче создается новый объект типа Integer, который содержит значение 700,
         * ссылка на него помещается в переменную uselessVar, которая хранится в стеке в фрейме метода.
         */
        Integer uselessVar = 700;

        /**
         * Вызывается метод toString(), который возвращает строку, эта строка конкатенирует со строками,
         * которые автоматически получаются из значений переменных i и ii.
         * Итоговая строка передается в метод println() объекта out, который выводит ее в консоль.
         * После чего метод printAll() завершает работу, фрейм для этого метода удаляется из стека,
         * вместе с локальными переменными.
         * Так как на объект Integer со значением 700 больше не существует ссылки,
         * то он становится доступным для сборщика мусора.
         */
        System.out.println(o.toString() + i + ii);
    }
}